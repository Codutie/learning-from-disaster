{
    "collab_server" : "",
    "contents" : "rm(list = ls())\n\n\n########### LOAD DATA ###########\n\ntrain <- read.csv(\"data/train.csv\", stringsAsFactors = F)\ntest <- read.csv(\"data/test.csv\", stringsAsFactors = F)\nfull <- bind_rows(train, test)\nfull$Survived <- ifelse(full$Survived == 1, \"one\", \"zero\") # need to do it to avoid error messages in caret trainControl classProb = T\n\n\n########### PACKAGES ###########\n\ninstall_and_load <- function(libraries)\n{\n  new.packages <- libs[!(libraries %in% installed.packages()[,\"Package\"])]\n  if(length(new.packages)) install.packages(new.packages)\n  sapply(libs, require, character.only = T, warn.conflicts = F)\n}\nlibs <- c(\"plyr\", \"dplyr\", \"ggplot2\", \"readr\", \"xgboost\", \"caret\", \"Matrix\", \"Metrics\", \"miscTools\", \"glmnet\")\ninstall_and_load(libs)\n\n\n\n\n\n########### STRAIGHT FORWARD FEATURE ENGINEERING ###########\n\n# Extract Title from Names\nfull$Title <- gsub('(.*, )|(\\\\..*)', '', full$Name)\nofficer <- c('Capt', 'Col', 'Don', 'Dr', 'Major', 'Rev')\nroyalty <- c('Dona', 'Lady', 'the Countess','Sir', 'Jonkheer')\n\n# Reassign mlle, ms, and mme accordingly\nfull$Title[full$Title == 'Mlle']        <- 'Miss' \nfull$Title[full$Title == 'Ms']          <- 'Miss'\nfull$Title[full$Title == 'Mme']         <- 'Mrs' \nfull$Title[full$Title %in% royalty]  <- 'Royalty'\nfull$Title[full$Title %in% officer]  <- 'Officer'\n\n# Fare\nfull$Fare[is.na(full$Fare)] <- median(full[full$Pclass=='3' & full$Embarked=='S',]$Fare, na.rm=TRUE)\n\n# Age\nage_features <- c(\"Pclass\", \"Sex\", \"SibSp\", \"Parch\", \"Fare\", \"Embarked\", \"Title\")\nage_frml <- as.formula(paste(\"Age ~ \", paste(age_features, collapse= \"+\")))\nage_fit <- rpart(age_frml, data = full[-which(is.na(full$Age)), ], cp = 0.001)\nfull$Age[is.na(full$Age)] <- round(predict(age_fit, full[is.na(full$Age), ]), 2)\n\n# Family Size\nfull$FSize <- full$SibSp + full$Parch + 1\n\n# Child\nfull$Child[full$Age < 18] <- 'Child'\nfull$Child[full$Age >= 18] <- 'Adult'\n\n# FsizeD\nfull$FSizeD[full$FSize == 1] <- 'Alone'\nfull$FSizeD[full$FSize < 5 & full$FSize > 1] <- 'Small'\nfull$FSizeD[full$FSize > 4] <- 'Big'\n\n# Embarked\nfull$Embarked[c(62, 830)] <- 'C'\n\n\n\n########### ENSEMBLE MODELING ###########\n\nfeatures <- c(\"Pclass\", \"Sex\", \"Age\", \"SibSp\", \"Parch\", \"Fare\", \"Embarked\", \"Title\", \"FSizeD\", \"Child\")\nfrml <- as.formula(paste(\"Survived ~ \", paste(features, collapse= \"+\")))\n\n\n# prepare data for modeling\nchar_features <- names(full)[sapply(full, is.character)]\nfull[, char_features] <- lapply(full[, char_features], as.factor)\ntrain <- full[!is.na(full$Survived), ]\ntest <- full[is.na(full$Survived), ]; test$Survived <- NULL\n\n# set.seed(5)\n# inTrain <- createDataPartition(y = train$Survived, p = .8, list = FALSE)\n# training <- train[ inTrain,]\n# testing <- train[-inTrain,]\n\nmy_control <- trainControl(\n  method=\"boot\",\n  repeats=5,\n  number=25,\n  verboseIter = F,\n  savePredictions=TRUE,\n  summaryFunction=twoClassSummary,\n  classProbs = T,\n  index=createResample(training$Survived, 25)\n)\n\nset.seed(121)\nmodel_list <- caretList(\n  frml, \n  data=train,\n  metric=\"ROC\",\n  trControl=my_control,\n  tuneList = list(\n     rf = caretModelSpec(method = \"rf\", tuneGrid = data.frame(mtry = round(sqrt(length(features))))),\n     nnet = caretModelSpec(method = \"nnet\"),\n     adaboost = caretModelSpec(method = \"adaboost\")))\n\n\nmodelCor(resamples(model_list))\n\n# rf      nnet  adaboost\n# rf       1.0000000 0.3447546 0.7782943\n# nnet     0.3447546 1.0000000 0.2417687\n# adaboost 0.7782943 0.2417687 1.0000000\n\nmodel_preds <- lapply(model_list, predict, newdata=test, type=\"prob\")\nmodel_preds <- lapply(model_preds, function(x) x[, 2])\nmodel_preds <- data.frame(model_preds)\n\n\n# glm ensemble\n\nset.seed(1)\nensemble <- caretStack(\n  model_list,\n  method=\"glm\",\n  metric=\"ROC\",\n  trControl=trainControl(\n    method=\"boot\",\n    number=20,\n    savePredictions=\"final\",\n    classProbs=TRUE,\n    summaryFunction=twoClassSummary\n  )\n)\n\nens_preds <- predict(ensemble, newdata=test, type=\"prob\")\nmodel_preds$ensemble <- ens_preds\n# caTools::colAUC(model_preds, testing$Survived)\n\n\n\n########### PREDICTION ###########\n\npreds <- predict(ensemble, newdata = test, type = \"raw\")\npreds <- ifelse(preds == \"zero\", 0, 1)\n\n\n# submission\nsubmission <- data.frame(PassengerId = test$PassengerId, Survived = preds)\nwrite.csv(submission, \"submission.csv\", row.names = F)\n",
    "created" : 1499933611313.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2813532050",
    "id" : "391D36E7",
    "lastKnownWriteTime" : 1500285367,
    "last_content_update" : 1500285367277,
    "path" : "~/Kaggle/learning-from-desaster/titanic.R",
    "project_path" : "titanic.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}