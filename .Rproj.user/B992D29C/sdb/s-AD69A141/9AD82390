{
    "collab_server" : "",
    "contents" : "##################### CONNECT TO BIGQUERY\nsource(\"/Users/enzo/Desktop/LocalSearch/DataScience/connections/R/bigQuery.R\")\n\n##################### LIBRARIES AND PACKAGES\nlibs <- c(\"bigrquery\", \"plyr\")\nlapply(libs, require, character.only = T)\n\n##################### LOAD DATA FROM BIGQUERY\n\nsql <- paste(readLines(\"/Users/enzo/Desktop/LocalSearch/DataScience/user_projects/clickstream_analysis/clickstreams.sql\", warn = 1), collapse = \"\\n\")\nmydata <- query_exec(sql, project = projectID, max_pages = Inf)\n\n\n# save raw data \nsave.image(\"~/Desktop/LocalSearch/Workspaces And Data/Workspaces/bigquery-projects_exploring_data/raw_data.RData\")\n\n\n################## CLEANING DATA & FEATURE ENGINEERING\n\n### removing idential rows from mydata\ntoRemove <- which((duplicated(mydata))) \n## if length(toRemove > 0 then execute)\nmydata <- mydata[-toRemove,]\n\n### na to _*missing*_\nmydata[is.na(mydata)] <- \"_*missing*_\"\n\n\n\n### merge PageType and PageTypeNew to PageTypeMerged\nPageTypeMerged <- mydata$PageType\nPageTypeMerged[which(mydata$PageType == \"_*missing*_\")] <- mydata$PageTypeNew[which(mydata$PageType == \"_*missing*_\")]\nmydata$PageTypeMerged <- PageTypeMerged\n\n\n## concatenate field what & where & whatWhere and save it into mydata\nWhatWhereCat <- paste(mydata$FieldWhat, mydata$FieldWhere, mydata$WhatWhere, sep = \" & \")\n\n\n## clean WhatWhereCat\nWhatWhereCatClean <- vector(length = nrow(mydata))\nindex <- 1\nfor(wwc in WhatWhereCat)\n{\n  temp <- strsplit(wwc, split = \" & \")[[1]]\n  temp <- temp[-which(temp == \"_*missing*_\")]\n  if( length(temp) == 0 )\n  {\n    WhatWhereCatClean[index] <- \"_missing_\"\n  }\n  else\n  {\n    WhatWhereCatClean[index] <- paste(temp, collapse = \" & \")\n  }\n  index <- index+1\n}\n\nmydata$WhatWhereClean <- WhatWhereCatClean\n\n\n### removing constant features\ncat(\"\\n## Removing the constants features.\\n\")\nfor (f in names(mydata)) {\n  if (length(unique(mydata[[f]])) == 1) {\n    cat(f, \"is constant. We delete it.\\n\")\n    mydata[[f]] <- NULL\n  }\n}\n\n\n## concatenate visitId & fullvisitorId to get unique sessionId for markov and calc the action step per session\nmydata$sessionId <- paste(mydata$visitId, mydata$fullVisitorId, sep = \"&\")\nmydata$sessionId2 <- paste(mydata$visitId, mydata$fullVisitorId, mydata$device_deviceCategory, sep = \"&\")\nmydata$actionStep <- ddply(.data = mydata, .variables = \"sessionId\", summarize, step = 1:length(sessionId))[[\"step\"]]\n\n## new variable: group of WhatWhereClean\nwwcGrouped <- as.character(mydata$WhatWhereClean)\nwwcGrouped[ifelse(grepl(\"restau|pizze|pizza|griechi|japani|steakho|mexikani\", mydata$WhatWhereClean, ignore.case = T), T, F)] <- \"Restaurant\"\n\nphoneNrCandidates <- as.character(as.numeric(as.character(mydata$WhatWhereClean)))\nphoneNrCandidatesClean <- sapply(phoneNrCandidates, function(x) length(strsplit(x, \"\")[[1]]), USE.NAMES = F)\n\nwwcGrouped[ifelse(phoneNrCandidatesClean > 4, T, F)] <- \"PhoneNr\"\nwwcGrouped[ifelse(grepl(\"garag\", mydata$WhatWhereClean, ignore.case = T), T, F)] <- \"Garage\"\nwwcGrouped[ifelse(grepl(\"coiffeu|coiffu|hairdre\", mydata$WhatWhereClean, ignore.case = T), T, F)] <- \"Coiffeur\"\nwwcGrouped[ifelse(grepl(\"_missing_\", mydata$WhatWhereClean, ignore.case = T), T, F)] <- \"EmptySearch\"\nwwcGrouped[ifelse(grepl(\"botox|faltenb|lifting|faltenu\", mydata$WhatWhereClean, ignore.case = T), T, F)] <- \"Botox\"\nwwcGrouped[which(! (wwcGrouped %in% c(\"Restaurant\", \"PhoneNr\", \"Coiffeur\", \"EmptySearch\", \"Botox\", \"Garage\")))] <- \"Else\"\n\nmydata$WhatWhereCleanGrouped <- wwcGrouped\n\n\n## new variable: group of trafficSource_source --> tssGrouped\ntssGrouped <- rep(\"otherSource\", nrow(mydata))\ntssGrouped[ifelse(grepl(\"(direct)|tel.local.ch|pages-jaunes.ch|directories\", mydata$trafficSource_source, ignore.case = T), T, F)] <- \"direct\"\ntssGrouped[ifelse(grepl(\"google\", mydata$trafficSource_source, ignore.case = T), T, F)] <- \"google\"\ntssGrouped[ifelse(grepl(\"bing\", mydata$trafficSource_source, ignore.case = T), T, F)] <- \"bing\"\ntssGrouped[ifelse(grepl(\"yahoo\", mydata$trafficSource_source, ignore.case = T), T, F)] <- \"yahoo\"\ntssGrouped[ifelse(grepl(\"bluewin\", mydata$trafficSource_source, ignore.case = T), T, F)] <- \"bluewin\"\n\nmydata$sourceGrouped <- tssGrouped\n\n\n### adding PageTypeMerged with PageTitle Carte de Suisse pour la recherche d'adresses et la planification d'itinéraire - dorénavant sur local.ch as HomePage | PageType Missing as Rest\nmydata$PageTypeMerged[which(mydata$hits_page_pageTitle == \"Carte de Suisse pour la recherche d'adresses et la planification d'itinéraire - dorénavant sur local.ch\" & mydata$PageTypeMerged == \"_*missing*_\")] <- \"HomePage\"\nmydata$PageTypeMerged[which(mydata$PageTypeMerged == \"_*missing*_\")] <- \"Else\"\n\nmydata$hits_page_pageTitle[which(mydata$clickstream == \"_missing_\")]\n\n## char to factor\ncat(\"\\n## Converting characters to factor.\\n\")\nfor (f in names(mydata)) {\n  if (class(mydata[[f]]) == \"character\") {\n    cat(f, \"is a character vector. Transform it to factor.\\n\")\n    mydata[[f]] <- as.factor(mydata[[f]])\n  }\n}\n\n\n\n### CLEAN WORKSPACE\nrm(f, toRemove, index, libs, PageTypeMerged, phoneNrCandidates, phoneNrCandidatesClean, projectID, sql, temp, tssGrouped, WhatWhereCat, WhatWhereCatClean, wwc, wwcGrouped)\n\n\n### SAVE WORKSPACE\nsave.image(\"~/Desktop/LocalSearch/Workspaces And Data/Workspaces/bigquery-projects_exploring_data/starter.RData\")\n",
    "created" : 1499937085800.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4157452039",
    "id" : "9AD82390",
    "lastKnownWriteTime" : 1488459773,
    "last_content_update" : 1488459773,
    "path" : "~/repo/dataintel_dataScience/user_projects/exploring_data/traffic_behaviour_starter.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}