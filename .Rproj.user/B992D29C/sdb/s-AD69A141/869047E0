{
    "collab_server" : "",
    "contents" : "#### Loading data\ntrain <- read.csv(\"data/train.csv\")\ntest  <- read.csv(\"data/tes\")\n\n##### Removing IDs\ntrain$ID <- NULL\ntest.id <- test$ID\ntest$ID <- NULL\n\n##### extracting TARGET\ntrain.y <- train$TARGET\ntrain$TARGET <- NULL\n\n##### 0 count per line\ncount0 <- function(x) {\n  return( sum(x == 0) )\n}\ntrain$n0 <- apply(train, 1, FUN=count0)\ntest$n0 <- apply(test, 1, FUN=count0)\n\n##### removing constant features\ncat(\"\\n## Removing the constants features.\\n\")\nfor (f in names(train)) {\n  if (length(unique(train[[f]])) == 1) {\n    cat(f, \"is constant in train. We delete it.\\n\")\n    train[[f]] <- NULL\n    test[[f]] <- NULL\n  }\n}\n\n##### removing identical features\nfeatures_pair <- combn(names(train), 2, simplify = F)\ntoRemove <- c()\nfor(pair in features_pair) {\n  f1 <- pair[1]\n  f2 <- pair[2]\n  \n  if (!(f1 %in% toRemove) & !(f2 %in% toRemove)) {\n    if (all(train[[f1]] == train[[f2]])) {\n      cat(f1, \"and\", f2, \"are equals.\\n\")\n      toRemove <- c(toRemove, f2)\n    }\n  }\n}\n\nfeature.names <- setdiff(names(train), toRemove)\n\ntrain <- train[, feature.names]\ntest <- test[, feature.names]\n\nrm(f, f1, f2, features_pair, pair, toRemove)\n\n######### LOG MODULO TRANSFORMATION\nlogTransform <- function(x){\n  sign(x) * log(abs(x) + 1)\n}\n\ntrain <- apply(train, 2, logTransform)\ntest <- apply(test, 2, logTransform)\n\n################### workspace\nload(\"Workspaces/baseData_cleaned.RData\")\nrm(label_name, predictors)\n\nflc <- findLinearCombos(train)\n\nredundantFeatures <- names(train)[flc$remove]\ntoKeep <- setdiff(names(train), redundantFeatures)\n\ntrain <- train[,toKeep]\ntest <- test[,toKeep]\n\npredictors <- names(train)\nlabel_name <- \"TARGET\"\n\n\n\nlibrary(xgboost)\nlibrary(Matrix)\n\nset.seed(1234)\n\ntrain <- read.csv(\"../input/train.csv\")\ntest  <- read.csv(\"../input/test.csv\")\n\n##### Removing IDs\ntrain$ID <- NULL\ntest.id <- test$ID\ntest$ID <- NULL\n\n##### Extracting TARGET\ntrain.y <- train$TARGET\ntrain$TARGET <- NULL\n\n##### 0 count per line\ncount0 <- function(x) {\n  return( sum(x == 0) )\n}\ntrain$n0 <- apply(train, 1, FUN=count0)\ntest$n0 <- apply(test, 1, FUN=count0)\n\n##### Removing constant features\ncat(\"\\n## Removing the constants features.\\n\")\nfor (f in names(train)) {\n  if (length(unique(train[[f]])) == 1) {\n    cat(f, \"is constant in train. We delete it.\\n\")\n    train[[f]] <- NULL\n    test[[f]] <- NULL\n  }\n}\n\n##### Removing identical features\nfeatures_pair <- combn(names(train), 2, simplify = F)\ntoRemove <- c()\nfor(pair in features_pair) {\n  f1 <- pair[1]\n  f2 <- pair[2]\n  \n  if (!(f1 %in% toRemove) & !(f2 %in% toRemove)) {\n    if (all(train[[f1]] == train[[f2]])) {\n      cat(f1, \"and\", f2, \"are equals.\\n\")\n      toRemove <- c(toRemove, f2)\n    }\n  }\n}\n\nfeature.names <- setdiff(names(train), toRemove)\n\ntrain <- train[, feature.names]\ntest <- test[, feature.names]\n\ntrain$TARGET <- train.y\n\n\n\n\ntrain <- sparse.model.matrix(TARGET ~ ., data = train)\n\ndtrain <- xgb.DMatrix(data=train, label=train.y)\nwatchlist <- list(train=dtrain)\n\nparam <- list(  objective           = \"binary:logistic\", \n                booster             = \"gbtree\",\n                eval_metric         = \"auc\",\n                eta                 = 0.02,\n                max_depth           = 5,\n                subsample           = 0.7,\n                colsample_bytree    = 0.7\n)\n\nclf <- xgb.train(   params              = param, \n                    data                = dtrain, \n                    nrounds             = 560, \n                    verbose             = 2,\n                    watchlist           = watchlist,\n                    maximize            = FALSE\n)\n\n\n\npreds <- predict(clf, test)\nplot(sort(preds))\n\n\n",
    "created" : 1499945769716.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2354332735",
    "id" : "869047E0",
    "lastKnownWriteTime" : 1499067670,
    "last_content_update" : 1499067670,
    "path" : "~/Kaggle/Santander Customer Satisfaction/RFiles/starter.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}